/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as GroundX from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Buckets {
    export interface Options {
        environment?: core.Supplier<environments.GroundXEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Buckets {
    protected readonly _options: Buckets.Options;

    constructor(_options: Buckets.Options = {}) {
        this._options = _options;
    }

    /**
     * List all buckets within your GroundX account
     *
     * @param {GroundX.BucketsListRequest} request
     * @param {Buckets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.buckets.list({
     *         n: 1,
     *         nextToken: "nextToken"
     *     })
     */
    public list(
        request: GroundX.BucketsListRequest = {},
        requestOptions?: Buckets.RequestOptions,
    ): core.HttpResponsePromise<GroundX.BucketListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: GroundX.BucketsListRequest = {},
        requestOptions?: Buckets.RequestOptions,
    ): Promise<core.WithRawResponse<GroundX.BucketListResponse>> {
        const { n, nextToken } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (n != null) {
            _queryParams["n"] = n.toString();
        }

        if (nextToken != null) {
            _queryParams["nextToken"] = nextToken;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.GroundXEnvironment.Default,
                "v1/bucket",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GroundX.BucketListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.GroundXError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.GroundXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.GroundXTimeoutError("Timeout exceeded when calling GET /v1/bucket.");
            case "unknown":
                throw new errors.GroundXError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new bucket.
     *
     * @param {GroundX.BucketCreateRequest} request
     * @param {Buckets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link GroundX.BadRequestError}
     *
     * @example
     *     await client.buckets.create({
     *         name: "your_bucket_name"
     *     })
     */
    public create(
        request: GroundX.BucketCreateRequest,
        requestOptions?: Buckets.RequestOptions,
    ): core.HttpResponsePromise<GroundX.BucketResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: GroundX.BucketCreateRequest,
        requestOptions?: Buckets.RequestOptions,
    ): Promise<core.WithRawResponse<GroundX.BucketResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.GroundXEnvironment.Default,
                "v1/bucket",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GroundX.BucketResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new GroundX.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.GroundXError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.GroundXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.GroundXTimeoutError("Timeout exceeded when calling POST /v1/bucket.");
            case "unknown":
                throw new errors.GroundXError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Look up a specific bucket by its bucketId.
     *
     * @param {number} bucketId - The bucketId of the bucket to look up.
     * @param {Buckets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link GroundX.BadRequestError}
     * @throws {@link GroundX.UnauthorizedError}
     *
     * @example
     *     await client.buckets.get(1)
     */
    public get(
        bucketId: number,
        requestOptions?: Buckets.RequestOptions,
    ): core.HttpResponsePromise<GroundX.BucketResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(bucketId, requestOptions));
    }

    private async __get(
        bucketId: number,
        requestOptions?: Buckets.RequestOptions,
    ): Promise<core.WithRawResponse<GroundX.BucketResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.GroundXEnvironment.Default,
                `v1/bucket/${encodeURIComponent(bucketId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GroundX.BucketResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new GroundX.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new GroundX.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.GroundXError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.GroundXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.GroundXTimeoutError("Timeout exceeded when calling GET /v1/bucket/{bucketId}.");
            case "unknown":
                throw new errors.GroundXError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Rename a bucket.
     *
     * @param {number} bucketId - The bucketId of the bucket being updated.
     * @param {GroundX.BucketUpdateRequest} request
     * @param {Buckets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link GroundX.BadRequestError}
     * @throws {@link GroundX.UnauthorizedError}
     *
     * @example
     *     await client.buckets.update(1, {
     *         newName: "your_bucket_name"
     *     })
     */
    public update(
        bucketId: number,
        request: GroundX.BucketUpdateRequest,
        requestOptions?: Buckets.RequestOptions,
    ): core.HttpResponsePromise<GroundX.BucketUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(bucketId, request, requestOptions));
    }

    private async __update(
        bucketId: number,
        request: GroundX.BucketUpdateRequest,
        requestOptions?: Buckets.RequestOptions,
    ): Promise<core.WithRawResponse<GroundX.BucketUpdateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.GroundXEnvironment.Default,
                `v1/bucket/${encodeURIComponent(bucketId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GroundX.BucketUpdateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new GroundX.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new GroundX.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.GroundXError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.GroundXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.GroundXTimeoutError("Timeout exceeded when calling PUT /v1/bucket/{bucketId}.");
            case "unknown":
                throw new errors.GroundXError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a bucket.
     *
     * @param {number} bucketId - The bucketId of the bucket being deleted.
     * @param {Buckets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link GroundX.BadRequestError}
     * @throws {@link GroundX.UnauthorizedError}
     *
     * @example
     *     await client.buckets.delete(1)
     */
    public delete(
        bucketId: number,
        requestOptions?: Buckets.RequestOptions,
    ): core.HttpResponsePromise<GroundX.MessageResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(bucketId, requestOptions));
    }

    private async __delete(
        bucketId: number,
        requestOptions?: Buckets.RequestOptions,
    ): Promise<core.WithRawResponse<GroundX.MessageResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.GroundXEnvironment.Default,
                `v1/bucket/${encodeURIComponent(bucketId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GroundX.MessageResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new GroundX.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new GroundX.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.GroundXError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.GroundXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.GroundXTimeoutError("Timeout exceeded when calling DELETE /v1/bucket/{bucketId}.");
            case "unknown":
                throw new errors.GroundXError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
