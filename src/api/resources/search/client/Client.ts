/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as GroundX from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Search {
    export interface Options {
        environment?: core.Supplier<environments.GroundXEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Search {
    protected readonly _options: Search.Options;

    constructor(_options: Search.Options = {}) {
        this._options = _options;
    }

    /**
     * Search documents on GroundX for the most relevant information to a given query.
     * The result of this query is typically used in one of two ways; `result.search.text` can be used to provide context to a language model, facilitating RAG, or `result.search.results` can be used to observe chunks of text which are relevant to the query, facilitating citation.
     *
     * @param {GroundX.SearchContentRequestId} id - The bucketId, groupId, or documentId to be searched. The document or documents within the specified container will be compared to the query, and relevant information will be extracted.
     * @param {GroundX.SearchRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link GroundX.BadRequestError}
     * @throws {@link GroundX.UnauthorizedError}
     *
     * @example
     *     await client.search.content(1, {
     *         n: 1,
     *         nextToken: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9",
     *         verbosity: 1,
     *         query: "my search query"
     *     })
     */
    public content(
        id: GroundX.SearchContentRequestId,
        request: GroundX.SearchRequest,
        requestOptions?: Search.RequestOptions,
    ): core.HttpResponsePromise<GroundX.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__content(id, request, requestOptions));
    }

    private async __content(
        id: GroundX.SearchContentRequestId,
        request: GroundX.SearchRequest,
        requestOptions?: Search.RequestOptions,
    ): Promise<core.WithRawResponse<GroundX.SearchResponse>> {
        const { n, nextToken, verbosity, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (n != null) {
            _queryParams["n"] = n.toString();
        }

        if (nextToken != null) {
            _queryParams["nextToken"] = nextToken;
        }

        if (verbosity != null) {
            _queryParams["verbosity"] = verbosity.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.GroundXEnvironment.Default,
                `v1/search/${encodeURIComponent(id)}`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GroundX.SearchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new GroundX.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new GroundX.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.GroundXError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.GroundXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.GroundXTimeoutError("Timeout exceeded when calling POST /v1/search/{id}.");
            case "unknown":
                throw new errors.GroundXError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Search documents on GroundX for the most relevant information to a given query by documentId(s).
     * The result of this query is typically used in one of two ways; `result.search.text` can be used to provide context to a language model, facilitating RAG, or `result.search.results` can be used to observe chunks of text which are relevant to the query, facilitating citation.
     *
     * @param {GroundX.SearchDocumentsRequest} request
     * @param {Search.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link GroundX.BadRequestError}
     * @throws {@link GroundX.UnauthorizedError}
     *
     * @example
     *     await client.search.documents({
     *         n: 1,
     *         nextToken: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9",
     *         verbosity: 1,
     *         query: "my search query",
     *         documentIds: ["docUUID1", "docUUID2"]
     *     })
     */
    public documents(
        request: GroundX.SearchDocumentsRequest,
        requestOptions?: Search.RequestOptions,
    ): core.HttpResponsePromise<GroundX.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__documents(request, requestOptions));
    }

    private async __documents(
        request: GroundX.SearchDocumentsRequest,
        requestOptions?: Search.RequestOptions,
    ): Promise<core.WithRawResponse<GroundX.SearchResponse>> {
        const { n, nextToken, verbosity, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (n != null) {
            _queryParams["n"] = n.toString();
        }

        if (nextToken != null) {
            _queryParams["nextToken"] = nextToken;
        }

        if (verbosity != null) {
            _queryParams["verbosity"] = verbosity.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.GroundXEnvironment.Default,
                "v1/search/documents",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GroundX.SearchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new GroundX.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new GroundX.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.GroundXError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.GroundXError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.GroundXTimeoutError("Timeout exceeded when calling POST /v1/search/documents.");
            case "unknown":
                throw new errors.GroundXError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
