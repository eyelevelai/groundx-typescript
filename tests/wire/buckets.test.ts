/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { GroundXClient } from "../../src/Client";

describe("Buckets", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            buckets: [
                {
                    bucketId: 1,
                    created: "2023-10-03T08:59:39Z",
                    fileCount: 1,
                    fileSize: "3.1GB",
                    name: "name",
                    updated: "2023-10-03T08:59:39Z",
                },
            ],
            count: 1,
            remaining: 10,
            total: 30,
        };
        server.mockEndpoint().get("/v1/bucket").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.buckets.list();
        expect(response).toEqual({
            buckets: [
                {
                    bucketId: 1,
                    created: "2023-10-03T08:59:39Z",
                    fileCount: 1,
                    fileSize: "3.1GB",
                    name: "name",
                    updated: "2023-10-03T08:59:39Z",
                },
            ],
            count: 1,
            remaining: 10,
            total: 30,
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "your_bucket_name" };
        const rawResponseBody = {
            bucket: {
                bucketId: 1,
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        };
        server
            .mockEndpoint()
            .post("/v1/bucket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.buckets.create({
            name: "your_bucket_name",
        });
        expect(response).toEqual({
            bucket: {
                bucketId: 1,
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            bucket: {
                bucketId: 1,
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        };
        server.mockEndpoint().get("/v1/bucket/1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.buckets.get(1);
        expect(response).toEqual({
            bucket: {
                bucketId: 1,
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { newName: "your_bucket_name" };
        const rawResponseBody = { bucket: { bucketId: 1, name: "name" } };
        server
            .mockEndpoint()
            .put("/v1/bucket/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.buckets.update(1, {
            newName: "your_bucket_name",
        });
        expect(response).toEqual({
            bucket: {
                bucketId: 1,
                name: "name",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "OK" };
        server.mockEndpoint().delete("/v1/bucket/1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.buckets.delete(1);
        expect(response).toEqual({
            message: "OK",
        });
    });
});
