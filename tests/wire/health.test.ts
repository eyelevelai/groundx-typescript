/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { GroundXClient } from "../../src/Client";

describe("Health", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            health: { services: [{ lastUpdate: "2023-10-03T08:59:39Z", service: "search", status: "healthy" }] },
        };
        server.mockEndpoint().get("/v1/health").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.health.list();
        expect(response).toEqual({
            health: {
                services: [
                    {
                        lastUpdate: "2023-10-03T08:59:39Z",
                        service: "search",
                        status: "healthy",
                    },
                ],
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            health: { services: [{ lastUpdate: "2023-10-03T08:59:39Z", service: "search", status: "healthy" }] },
        };
        server.mockEndpoint().get("/v1/health/search").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.health.get("search");
        expect(response).toEqual({
            health: {
                services: [
                    {
                        lastUpdate: "2023-10-03T08:59:39Z",
                        service: "search",
                        status: "healthy",
                    },
                ],
            },
        });
    });
});
