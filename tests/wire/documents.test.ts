/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { GroundXClient } from "../../src/Client";

describe("Documents", () => {
    test("ingestRemote", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            documents: [
                {
                    bucketId: 1234,
                    fileName: "my_file1.txt",
                    fileType: "txt",
                    sourceUrl: "https://my.source.url.com/file1.txt",
                },
            ],
        };
        const rawResponseBody = { ingest: { processId: "uuid", status: "queued" } };
        server
            .mockEndpoint()
            .post("/v1/ingest/documents/remote")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.ingestRemote({
            documents: [
                {
                    bucketId: 1234,
                    fileName: "my_file1.txt",
                    fileType: "txt",
                    sourceUrl: "https://my.source.url.com/file1.txt",
                },
            ],
        });
        expect(response).toEqual({
            ingest: {
                processId: "uuid",
                status: "queued",
            },
        });
    });

    test("ingestLocal", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = [
            { blob: "blob", metadata: { bucketId: 1234, fileName: "my_file1.txt", fileType: "txt" } },
        ];
        const rawResponseBody = { ingest: { processId: "uuid", status: "queued" } };
        server
            .mockEndpoint()
            .post("/v1/ingest/documents/local")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.ingestLocal([
            {
                blob: "blob",
                metadata: {
                    bucketId: 1234,
                    fileName: "my_file1.txt",
                    fileType: "txt",
                },
            },
        ]);
        expect(response).toEqual({
            ingest: {
                processId: "uuid",
                status: "queued",
            },
        });
    });

    test("crawlWebsite", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            websites: [
                {
                    bucketId: 1234,
                    cap: 10,
                    depth: 2,
                    searchData: { key: "value" },
                    sourceUrl: "https://my.website.com",
                },
            ],
        };
        const rawResponseBody = { ingest: { processId: "uuid", status: "queued" } };
        server
            .mockEndpoint()
            .post("/v1/ingest/documents/website")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.crawlWebsite({
            websites: [
                {
                    bucketId: 1234,
                    cap: 10,
                    depth: 2,
                    searchData: {
                        key: "value",
                    },
                    sourceUrl: "https://my.website.com",
                },
            ],
        });
        expect(response).toEqual({
            ingest: {
                processId: "uuid",
                status: "queued",
            },
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            documents: [
                {
                    bucketId: 1,
                    documentId: "documentId",
                    fileName: "fileName",
                    fileSize: "1.4MB",
                    fileType: "bmp",
                    filter: { key: "value", another_key: { nested: "value" } },
                    processId: "processId",
                    searchData: { key: "value" },
                    sourceUrl: "sourceUrl",
                    status: "queued",
                    statusMessage: "statusMessage",
                    textUrl: "textUrl",
                    xrayUrl: "xrayUrl",
                },
            ],
            nextToken: "nextToken",
        };
        server
            .mockEndpoint()
            .get("/v1/ingest/documents")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.list({
            n: 1,
            filter: "filter",
            sort: "name",
            sortOrder: "asc",
            status: "queued",
            nextToken: "nextToken",
        });
        expect(response).toEqual({
            documents: [
                {
                    bucketId: 1,
                    documentId: "documentId",
                    fileName: "fileName",
                    fileSize: "1.4MB",
                    fileType: "bmp",
                    filter: {
                        key: "value",
                        another_key: {
                            nested: "value",
                        },
                    },
                    processId: "processId",
                    searchData: {
                        key: "value",
                    },
                    sourceUrl: "sourceUrl",
                    status: "queued",
                    statusMessage: "statusMessage",
                    textUrl: "textUrl",
                    xrayUrl: "xrayUrl",
                },
            ],
            nextToken: "nextToken",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { ingest: { processId: "uuid", status: "queued" } };
        server
            .mockEndpoint()
            .delete("/v1/ingest/documents")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.delete({
            documentIds: "123e4567-e89b-12d3-a456-426614174000,9f7c11a6-24b8-4d52-a9f3-90a7e70a9e49",
        });
        expect(response).toEqual({
            ingest: {
                processId: "uuid",
                status: "queued",
            },
        });
    });

    test("getProcessingStatusById", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            ingest: { id: 1, processId: "processId", status: "queued", statusMessage: "statusMessage" },
        };
        server
            .mockEndpoint()
            .get("/v1/ingest/processId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.getProcessingStatusById("processId");
        expect(response).toEqual({
            ingest: {
                id: 1,
                processId: "processId",
                status: "queued",
                statusMessage: "statusMessage",
            },
        });
    });

    test("lookup", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            count: 20,
            documents: [
                {
                    bucketId: 1,
                    documentId: "documentId",
                    fileName: "fileName",
                    fileSize: "1.4MB",
                    fileType: "bmp",
                    filter: { key: "value", another_key: { nested: "value" } },
                    processId: "processId",
                    searchData: { key: "value" },
                    sourceUrl: "sourceUrl",
                    status: "queued",
                    statusMessage: "statusMessage",
                    textUrl: "textUrl",
                    xrayUrl: "xrayUrl",
                },
            ],
            nextToken: "nHXtu=",
            remaining: 10,
            total: 30,
        };
        server
            .mockEndpoint()
            .get("/v1/ingest/documents/1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.lookup(1, {
            n: 1,
            filter: "filter",
            sort: "name",
            sortOrder: "asc",
            status: "queued",
            nextToken: "nextToken",
        });
        expect(response).toEqual({
            count: 20,
            documents: [
                {
                    bucketId: 1,
                    documentId: "documentId",
                    fileName: "fileName",
                    fileSize: "1.4MB",
                    fileType: "bmp",
                    filter: {
                        key: "value",
                        another_key: {
                            nested: "value",
                        },
                    },
                    processId: "processId",
                    searchData: {
                        key: "value",
                    },
                    sourceUrl: "sourceUrl",
                    status: "queued",
                    statusMessage: "statusMessage",
                    textUrl: "textUrl",
                    xrayUrl: "xrayUrl",
                },
            ],
            nextToken: "nHXtu=",
            remaining: 10,
            total: 30,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            document: {
                bucketId: 1,
                documentId: "documentId",
                fileName: "fileName",
                fileSize: "1.4MB",
                fileType: "bmp",
                filter: { key: "value", another_key: { nested: "value" } },
                processId: "processId",
                searchData: { key: "value" },
                sourceUrl: "sourceUrl",
                status: "queued",
                statusMessage: "statusMessage",
                textUrl: "textUrl",
                xrayUrl: "xrayUrl",
            },
        };
        server
            .mockEndpoint()
            .get("/v1/ingest/document/documentId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.get("documentId");
        expect(response).toEqual({
            document: {
                bucketId: 1,
                documentId: "documentId",
                fileName: "fileName",
                fileSize: "1.4MB",
                fileType: "bmp",
                filter: {
                    key: "value",
                    another_key: {
                        nested: "value",
                    },
                },
                processId: "processId",
                searchData: {
                    key: "value",
                },
                sourceUrl: "sourceUrl",
                status: "queued",
                statusMessage: "statusMessage",
                textUrl: "textUrl",
                xrayUrl: "xrayUrl",
            },
        });
    });

    test("deleteById", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            ingest: { id: 1, processId: "processId", status: "queued", statusMessage: "statusMessage" },
        };
        server
            .mockEndpoint()
            .delete("/v1/ingest/document/documentId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.documents.deleteById("documentId");
        expect(response).toEqual({
            ingest: {
                id: 1,
                processId: "processId",
                status: "queued",
                statusMessage: "statusMessage",
            },
        });
    });

    test("getProcesses", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            processes: [{ id: 1, processId: "processId", status: "queued", statusMessage: "statusMessage" }],
        };
        server.mockEndpoint().get("/v1/ingest").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.documents.getProcesses({
            n: 1,
            status: "queued",
        });
        expect(response).toEqual({
            processes: [
                {
                    id: 1,
                    processId: "processId",
                    status: "queued",
                    statusMessage: "statusMessage",
                },
            ],
        });
    });
});
