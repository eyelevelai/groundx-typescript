/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { GroundXClient } from "../../src/Client";

describe("Groups", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            groups: [
                {
                    buckets: [
                        {
                            bucketId: 1,
                            created: "2023-10-03T08:59:39Z",
                            fileSize: "3.1GB",
                            updated: "2023-10-03T08:59:39Z",
                        },
                    ],
                    created: "2023-10-03T08:59:39Z",
                    fileCount: 1,
                    fileSize: "3.1GB",
                    groupId: 1,
                    name: "name",
                    updated: "2023-10-03T08:59:39Z",
                },
            ],
            count: 1,
            remaining: 10,
            total: 30,
        };
        server.mockEndpoint().get("/v1/group").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.groups.list({
            n: 1,
            nextToken: "nextToken",
        });
        expect(response).toEqual({
            groups: [
                {
                    buckets: [
                        {
                            bucketId: 1,
                            created: "2023-10-03T08:59:39Z",
                            fileSize: "3.1GB",
                            updated: "2023-10-03T08:59:39Z",
                        },
                    ],
                    created: "2023-10-03T08:59:39Z",
                    fileCount: 1,
                    fileSize: "3.1GB",
                    groupId: 1,
                    name: "name",
                    updated: "2023-10-03T08:59:39Z",
                },
            ],
            count: 1,
            remaining: 10,
            total: 30,
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "your_group_name" };
        const rawResponseBody = {
            group: {
                buckets: [
                    {
                        bucketId: 1,
                        created: "2023-10-03T08:59:39Z",
                        fileSize: "3.1GB",
                        updated: "2023-10-03T08:59:39Z",
                    },
                ],
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                groupId: 1,
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        };
        server
            .mockEndpoint()
            .post("/v1/group")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.create({
            name: "your_group_name",
        });
        expect(response).toEqual({
            group: {
                buckets: [
                    {
                        bucketId: 1,
                        created: "2023-10-03T08:59:39Z",
                        fileSize: "3.1GB",
                        updated: "2023-10-03T08:59:39Z",
                    },
                ],
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                groupId: 1,
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            group: {
                buckets: [
                    {
                        bucketId: 1,
                        created: "2023-10-03T08:59:39Z",
                        fileSize: "3.1GB",
                        updated: "2023-10-03T08:59:39Z",
                    },
                ],
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                groupId: 1,
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        };
        server.mockEndpoint().get("/v1/group/1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.groups.get(1);
        expect(response).toEqual({
            group: {
                buckets: [
                    {
                        bucketId: 1,
                        created: "2023-10-03T08:59:39Z",
                        fileSize: "3.1GB",
                        updated: "2023-10-03T08:59:39Z",
                    },
                ],
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                groupId: 1,
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { newName: "your_group_name" };
        const rawResponseBody = {
            group: {
                buckets: [
                    {
                        bucketId: 1,
                        created: "2023-10-03T08:59:39Z",
                        fileSize: "3.1GB",
                        updated: "2023-10-03T08:59:39Z",
                    },
                ],
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                groupId: 1,
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        };
        server
            .mockEndpoint()
            .put("/v1/group/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.update(1, {
            newName: "your_group_name",
        });
        expect(response).toEqual({
            group: {
                buckets: [
                    {
                        bucketId: 1,
                        created: "2023-10-03T08:59:39Z",
                        fileSize: "3.1GB",
                        updated: "2023-10-03T08:59:39Z",
                    },
                ],
                created: "2023-10-03T08:59:39Z",
                fileCount: 1,
                fileSize: "3.1GB",
                groupId: 1,
                name: "name",
                updated: "2023-10-03T08:59:39Z",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "OK" };
        server.mockEndpoint().delete("/v1/group/1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.groups.delete(1);
        expect(response).toEqual({
            message: "OK",
        });
    });

    test("addBucket", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "OK" };
        server
            .mockEndpoint()
            .post("/v1/group/1/bucket/1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.addBucket(1, 1);
        expect(response).toEqual({
            message: "OK",
        });
    });

    test("removeBucket", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "OK" };
        server
            .mockEndpoint()
            .delete("/v1/group/1/bucket/1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.removeBucket(1, 1);
        expect(response).toEqual({
            message: "OK",
        });
    });
});
