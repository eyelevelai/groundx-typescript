/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { GroundXClient } from "../../src/Client";

describe("Search", () => {
    test("content", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { query: "my search query" };
        const rawResponseBody = {
            search: {
                count: 1,
                results: [{}],
                query: "query",
                score: 1.1,
                searchQuery: "searchQuery",
                text: "text",
                nextToken: "nextToken",
            },
        };
        server
            .mockEndpoint()
            .post("/v1/search/1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.search.content(1, {
            n: 1,
            nextToken: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9",
            verbosity: 1,
            query: "my search query",
        });
        expect(response).toEqual({
            search: {
                count: 1,
                results: [{}],
                query: "query",
                score: 1.1,
                searchQuery: "searchQuery",
                text: "text",
                nextToken: "nextToken",
            },
        });
    });

    test("documents", async () => {
        const server = mockServerPool.createServer();
        const client = new GroundXClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { query: "my search query", documentIds: ["docUUID1", "docUUID2"] };
        const rawResponseBody = {
            search: {
                count: 1,
                results: [{}],
                query: "query",
                score: 1.1,
                searchQuery: "searchQuery",
                text: "text",
                nextToken: "nextToken",
            },
        };
        server
            .mockEndpoint()
            .post("/v1/search/documents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.search.documents({
            n: 1,
            nextToken: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9",
            verbosity: 1,
            query: "my search query",
            documentIds: ["docUUID1", "docUUID2"],
        });
        expect(response).toEqual({
            search: {
                count: 1,
                results: [{}],
                query: "query",
                score: 1.1,
                searchQuery: "searchQuery",
                text: "text",
                nextToken: "nextToken",
            },
        });
    });
});
